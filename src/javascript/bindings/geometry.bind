static duk_ret_t Geometry_offset_contour(duk_context *ctx) {
  Geometry g;
  double offset = (double)duk_to_number(ctx, 1);
  nlohmann::json path = json::parse(duk_json_encode(ctx, 0));
  nlohmann::json ret = g.offset(path, offset);
  duk_push_string(ctx, ret.dump().c_str());
  duk_json_decode(ctx, -1);
  return 1;  /* no return value (= undefined) */
}
static duk_ret_t Geometry_chainify(duk_context *ctx) {
  Geometry g;
  nlohmann::json path = json::parse(duk_json_encode(ctx, 0));
  nlohmann::json ret = g.chainify(path);
  duk_push_string(ctx, ret.dump().c_str());
  duk_json_decode(ctx, -1);
  return 1;  /* no return value (= undefined) */
}
static duk_ret_t Geometry_normalize(duk_context *ctx) {
  Geometry g;
  nlohmann::json path = json::parse(duk_json_encode(ctx, 0));
  nlohmann::json ret = g.normalize(path);
  duk_push_string(ctx, ret.dump().c_str());
  duk_json_decode(ctx, -1);
  return 1;  /* no return value (= undefined) */
}
static duk_ret_t Geometry_get_extents(duk_context *ctx) {
  Geometry g;
  nlohmann::json path = json::parse(duk_json_encode(ctx, 0));
  nlohmann::json ret = g.get_extents(path);
  duk_push_string(ctx, ret.dump().c_str());
  duk_json_decode(ctx, -1);
  return 1;  /* no return value (= undefined) */
}
static duk_ret_t Geometry_rotate_point(duk_context *ctx) {
  Geometry g;
  nlohmann::json cj = json::parse(duk_json_encode(ctx, 0));
  nlohmann::json pj = json::parse(duk_json_encode(ctx, 1));
  glm::vec2 center;
  center.x = cj["x"];
  center.y = cj["y"];
  glm::vec2 point;
  point.x = pj["x"];
  point.y = pj["y"];
  double angle = (double)duk_to_number(ctx, 2);
  glm::vec2 rotated_point = g.rotate_point(center, point, angle);
  nlohmann::json ret;
  ret["x"] = rotated_point.x;
  ret["y"] = rotated_point.y;
  duk_push_string(ctx, ret.dump().c_str());
  duk_json_decode(ctx, -1);
  return 1;  /* no return value (= undefined) */
}
void geometry_register_bindings()
{
  const duk_function_list_entry Geometry_class[] = {
    { "offset_contour", Geometry_offset_contour, 2 /* no args */ },
    { "chainify", Geometry_chainify, 1 /* no args */ },
    { "normalize", Geometry_normalize, 1 /* no args */ },
    { "rotate_point", Geometry_rotate_point, 3 /* no args */ },
    { "get_extents", Geometry_get_extents, 1 /* no args */ },
    { NULL, NULL, 0 }
  };
  js.bind_module("geometry", Geometry_class);
}