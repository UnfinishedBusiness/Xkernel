static duk_ret_t gui_new_window(duk_context *ctx) {
    window_t w;
    w.title = duk_to_string(ctx, 0);
    w.visable = true;
    int i = gui.windows.size();
    gui.windows.push_back(w);
    duk_push_int(ctx, i);
    return 1;  /* 1 return value (= undefined) */
}
static duk_ret_t gui_window_add_text(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_text_t t;
        t.text = duk_to_string(ctx, 1);
        t.size = gui.default_text_size;
        t.color = gui.default_text_color;
        window_element_t e;
        e.type = element_types::element_text;
        e.text = t;
        ret = gui.windows[window_id].elements.size();
        gui.windows[window_id].elements.push_back(e);
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_set_text_style(duk_context *ctx) {
    int window_id = duk_to_int(ctx, 0);
    int text_id = duk_to_int(ctx, 1);
    duk_to_object(ctx, 2);
    nlohmann::json j = json::parse(duk_json_encode(ctx, -1));
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (text_id < gui.windows[window_id].elements.size())
        {
            for (json::iterator it = j.begin(); it != j.end(); ++it)
            {
                if (it.key() == "size")
                {
                    //printf("Setting size to: %.4f\n", (float)value);
                    gui.windows[window_id].elements[text_id].text.size = (float)it.value();
                }
                if (it.key() == "color")
                {
                    for (json::iterator sub_it = it.value().begin(); sub_it != it.value().end(); ++sub_it)
                    {
                        if (sub_it.key() == "r")
                        {
                            gui.windows[window_id].elements[text_id].text.color.x = (float)sub_it.value();
                        }
                        if (sub_it.key() == "g")
                        {
                            gui.windows[window_id].elements[text_id].text.color.y = (float)sub_it.value();
                        }
                        if (sub_it.key() == "b")
                        {
                            gui.windows[window_id].elements[text_id].text.color.z = (float)sub_it.value();
                        }
                        if (sub_it.key() == "a")
                        {
                            gui.windows[window_id].elements[text_id].text.color.w = (float)sub_it.value();
                        }
                    }
                }
            }
        }
    }
    return 0;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_set_text(duk_context *ctx) {
    int window_id = duk_to_int(ctx, 0);
    int text_id = duk_to_int(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (text_id < gui.windows[window_id].elements.size())
        {
            gui.windows[window_id].elements[text_id].text.text = std::string(duk_to_string(ctx, 2));
        }
    }
    return 0;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_add_checkbox(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_checkbox_t w;
        w.text = duk_to_string(ctx, 1);
        w.value = duk_to_boolean(ctx, 2);
        window_element_t e;
        e.type = element_types::element_checkbox;
        e.checkbox = w;
        ret = gui.windows[window_id].elements.size();
        gui.windows[window_id].elements.push_back(e);
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_sameline(duk_context *ctx) {
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_element_t e;
        e.type = element_types::element_sameline;
        gui.windows[window_id].elements.push_back(e);
    }
    return 0;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_separator(duk_context *ctx) {
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_element_t e;
        e.type = element_types::element_separator;
        gui.windows[window_id].elements.push_back(e);
    }
    return 0;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_checkbox(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    int widget_id = duk_to_int(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (widget_id < gui.windows[window_id].elements.size())
        {
            ret = gui.windows[window_id].elements[widget_id].checkbox.value;
        }
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_add_slider(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_slider_t w;
        w.text = duk_to_string(ctx, 1);
        w.value = duk_to_number(ctx, 2);
        w.min = (float)duk_to_number(ctx, 3);
        w.max = (float)duk_to_number(ctx, 4);
        window_element_t e;
        e.type = element_types::element_slider;
        e.slider = w;
        ret = gui.windows[window_id].elements.size();
        gui.windows[window_id].elements.push_back(e);
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_slider(duk_context *ctx) {
    float ret = -1;
    int window_id = duk_to_int(ctx, 0);
    int widget_id = duk_to_int(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (widget_id < gui.windows[window_id].elements.size())
        {
            ret = gui.windows[window_id].elements[widget_id].slider.value;
        }
    }
    duk_push_number(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_add_button(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_button_t w;
        w.text = std::string(duk_to_string(ctx, 1));
        w.value = false;
        window_element_t e;
        e.type = element_types::element_button;
        e.button = w;
        ret = gui.windows[window_id].elements.size();
        gui.windows[window_id].elements.push_back(e);
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_button(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    int widget_id = duk_to_int(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (widget_id < gui.windows[window_id].elements.size())
        {
            ret = gui.windows[window_id].elements[widget_id].button.value;
        }
    }
    duk_push_number(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_add_input_text(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_input_text_t w;
        w.text = std::string(duk_to_string(ctx, 1));
        sprintf(w.value, "%s", duk_to_string(ctx, 2));
        window_element_t e;
        e.type = element_types::element_input_text;
        e.input_text = w;
        ret = gui.windows[window_id].elements.size();
        gui.windows[window_id].elements.push_back(e);
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_input_text(duk_context *ctx) {
    std::string ret = "";
    int window_id = duk_to_int(ctx, 0);
    int widget_id = duk_to_int(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (widget_id < gui.windows[window_id].elements.size())
        {
            ret = std::string(gui.windows[window_id].elements[widget_id].input_text.value);
        }
    }
    duk_push_string(ctx, ret.c_str());
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_add_input_double(duk_context *ctx) {
    int ret = -1;
    int window_id = duk_to_int(ctx, 0);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        window_input_double_t w;
        w.text = std::string(duk_to_string(ctx, 1));
        w.value = (double)duk_to_number(ctx, 2);
        window_element_t e;
        e.type = element_types::element_input_double;
        e.input_double = w;
        ret = gui.windows[window_id].elements.size();
        gui.windows[window_id].elements.push_back(e);
    }
    duk_push_int(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_input_double(duk_context *ctx) {
    double ret = 0.0f;
    int window_id = duk_to_int(ctx, 0);
    int widget_id = duk_to_int(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        if (widget_id < gui.windows[window_id].elements.size())
        {
            ret = gui.windows[window_id].elements[widget_id].input_double.value;
        }
    }
    duk_push_number(ctx, ret);
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_mouse(duk_context *ctx) {
    duk_idx_t obj_idx = duk_push_object(ctx);
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    const ImVec2 mouse_pos = io.MousePos;
    duk_push_int(ctx, mouse_pos.x);
    duk_put_prop_string(ctx, obj_idx, "x");
    duk_push_int(ctx, mouse_pos.y);
    duk_put_prop_string(ctx, obj_idx, "y");
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_keyboard(duk_context *ctx) {
    duk_idx_t obj_idx = duk_push_object(ctx);
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    int keycode = -1;
    for (int x = 0; x < IM_ARRAYSIZE(io.KeysDown); x++)
    {
        if (io.KeysDown[x])
        {
            keycode = x;
            //printf("Keycode: %c\n", keycode);
            break;
        }
    }
    duk_push_int(ctx, keycode);
    duk_put_prop_string(ctx, obj_idx, "keycode");
    if (keycode > 0)
    {
        char charactor[5];
        sprintf(charactor, "%c", keycode);
        duk_push_string(ctx, charactor);
        duk_put_prop_string(ctx, obj_idx, "char");
    }
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_get_mouse_click(duk_context *ctx) {
    duk_idx_t obj_idx = duk_push_object(ctx);
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    int keycode = -1;
    for (int x = 0; x < IM_ARRAYSIZE(io.MouseDown); x++)
    {
        if (io.MouseDown[x])
        {
            keycode = x;
            //printf("Keycode: %c\n", keycode);
            break;
        }
    }
    duk_push_int(ctx, keycode);
    duk_put_prop_string(ctx, obj_idx, "keycode");
    return 1;  /* 0 return value (= undefined) */
}
static duk_ret_t gui_window_show(duk_context *ctx) {
    int window_id = duk_to_int(ctx, 0);
    bool show = duk_to_boolean(ctx, 1);
    if (window_id < gui.windows.size()) //Make sure this window exists!
    {
        gui.windows[window_id].visable = show;
    }
    return 0;  /* 0 return value (= undefined) */
}
void gui_register_bindings()
{
    const duk_function_list_entry gui_class[] = {
        { "new_window", gui_new_window, 1 /* no args */ },
        { "add_text", gui_window_add_text, 2 /* no args */ },
        { "set_text", gui_window_set_text, 3 /* no args */ },
        { "set_text_style", gui_window_set_text_style, 3 /* no args */ },
        { "add_checkbox", gui_window_add_checkbox, 3 /* no args */ },
        { "sameline", gui_window_sameline, 1 /* no args */ },
        { "separator", gui_window_separator, 1 /* no args */ },
        { "get_checkbox", gui_window_get_checkbox, 2 /* no args */ },
        { "add_slider", gui_window_add_slider, 5 /* no args */ },
        { "get_slider", gui_window_get_slider, 2 /* no args */ },
        { "add_button", gui_window_add_button, 2 /* no args */ },
        { "get_button", gui_window_get_button, 2 /* no args */ },
        { "add_input_text", gui_window_add_input_text, 3 /* no args */ },
        { "get_input_text", gui_window_get_input_text, 2 /* no args */ },
        { "add_input_double", gui_window_add_input_double, 3 /* no args */ },
        { "get_input_double", gui_window_get_input_double, 2 /* no args */ },
        { "get_mouse", gui_window_get_mouse, 0 /* no args */ },
        { "get_keyboard", gui_window_get_keyboard, 0 /* no args */ },
        { "get_mouse_click", gui_window_get_mouse_click, 0 /* no args */ },
        { "show", gui_window_show, 2 /* no args */ },
        { NULL, NULL, 0 }
    };
    js.bind_module("gui", gui_class);
}