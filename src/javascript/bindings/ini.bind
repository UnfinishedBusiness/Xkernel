static duk_ret_t ini_get(duk_context *ctx) {
    duk_idx_t obj_idx;
    INIReader reader(duk_to_string(ctx, 0));
    if (reader.ParseError() != 0) {
        obj_idx = duk_push_object(ctx);
        duk_push_string(ctx, "failed to read file");
        duk_put_prop_string(ctx, obj_idx, "status");
        duk_push_string(ctx, duk_to_string(ctx, 0));
        duk_put_prop_string(ctx, obj_idx, "file");
        return 1;
    }
    obj_idx = duk_push_object(ctx);
    duk_push_string(ctx, "ok");
    duk_put_prop_string(ctx, obj_idx, "status");
    duk_push_string(ctx, duk_to_string(ctx, 0));
    duk_put_prop_string(ctx, obj_idx, "file");
    duk_push_string(ctx, reader.Get(duk_to_string(ctx, 1), duk_to_string(ctx, 2), duk_to_string(ctx, 3)).c_str());
    duk_put_prop_string(ctx, obj_idx, "value");
    return 1;  /* no return value (= undefined) */
}
void ini_register_bindings()
{
    const duk_function_list_entry ini_class[] = {
        { "get", ini_get, 4 /* no args */ },
        { NULL, NULL, 0 }
    };
    js.bind_module("ini", ini_class);
}