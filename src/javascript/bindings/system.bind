/* CRC-32C (iSCSI) polynomial in reversed bit order. */
#define POLY 0x82f63b78

/* CRC-32 (Ethernet, ZIP, etc.) polynomial in reversed bit order. */
/* #define POLY 0xedb88320 */

uint32_t crc32c(uint32_t crc, const unsigned char *buf, size_t len)
{
    int k;

    crc = ~crc;
    while (len--) {
        crc ^= *buf++;
        for (k = 0; k < 8; k++)
            crc = crc & 1 ? (crc >> 1) ^ POLY : crc >> 1;
    }
    return ~crc;
}
static duk_ret_t system_os(duk_context *ctx) {
  #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
    duk_push_string(ctx, "WINDOWS");
  #elif __APPLE__
    duk_push_string(ctx, "APPLE");
  #elif __linux__
    duk_push_string(ctx, "LINUX");
  #elif __unix__
    duk_push_string(ctx, "UNIX");
  #elif defined(_POSIX_VERSION)
    duk_push_string(ctx, "POSIX");
  #else
    duk_push_string(ctx, "UNKNOWN");
  #endif
  return 1;  /* no return value (= undefined) */
}
static duk_ret_t system_crc(duk_context *ctx) {
  uint32_t checksum = 0;
  std::string buf = std::string(duk_to_string(ctx, 0));
  /*int count = buf.size();
  while (count > 0)
  {
    checksum ^= buf.c_str()[--count];
  }*/

  checksum = crc32c(0, buf.c_str(), buf.size());
  duk_push_number(ctx, (uint32_t)checksum);
  return 1;
}
void system_register_bindings()
{
  const duk_function_list_entry system_class[] = {
    { "os", system_os, 0 /* no args */ },
    { "crc", system_crc, 1 /* no args */ },
    { NULL, NULL, 0 }
  };
  js.bind_module("system", system_class);
}